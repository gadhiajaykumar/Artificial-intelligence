Date:			    TRAVELLING SALESMAN PROBLEM
Ex. No: 5
AIM:

To write a python program to implement Travelling Salesman Problem.


ALGORITHM:
STEP 1: Start the program.

STEP 2: Consider city 1 as the starting and ending point.

STEP 3: Since the route is cyclic, we can consider any point as a starting point.

STEP 4: Generate all (n-1)! permutations of cities.

STEP 5: Calculate the cost of every permutation and keep track of the minimum cost permutation.

STEP 6: Return the permutation with minimum cost.

STEP 7: Compile and execute the program.

STEP 8: Print the result.

STEP 9: End.

PROGRAM:

# Python3 program to implement traveling salesman
# problem using naive approach.
from sys import maxsize
from itertools import permutations
V = 4
# implementation of traveling Salesman Problem
def travellingSalesmanProblem(graph, s):
 
    # store all vertex apart from source vertex
    vertex = []
    for i in range(V):
        if i != s:
            vertex.append(i)
 
    # store minimum weight Hamiltonian Cycle
    min_path = maxsize
    next_permutation=permutations(vertex)
    for i in next_permutation:
        # store current Path weight(cost)
        current_pathweight = 0
        # compute current path weight
        k = s
        for j in i:
            current_pathweight += graph[k][j]
            k = j
        current_pathweight += graph[k][s]
        # update minimum
        min_path = min(min_path, current_pathweight)   
    return min_path
 
# Driver Code
if __name__ == "__main__":
 
    # matrix representation of graph
    graph = [[0, 10, 15, 20], [10, 0, 35, 25],
            [15, 35, 0, 30], [20, 25, 30, 0]]
    s = 0
    print(travellingSalesmanProblem(graph, s))               
OUTPUT:




RESULT: Therefore, the above program to implement Travelling Salesman Problem is compiled and executed successfully.
