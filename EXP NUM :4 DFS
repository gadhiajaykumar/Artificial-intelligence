Date: 			   	 DEPTH FIRST SEARCH (DFS )
Ex. No: 4

 AIM:

To write a python program to implement Depth First Search Algorithm.

ALGORITHM:

STEP 1: Start the program.

STEP 2: We will start by putting any one of the graph's vertex on top of the stack.

STEP 3: After that take, the top item of the stack and add it to the visited list of the vertex.

STEP 4: Next, create a list of that adjacent node of the vertex.

STEP 5: Add the ones which are not in the visited list of vertexes to the top of the stack.

STEP 6: Lastly, keep repeating steps 3, 4 and 5 until the stack is empty.

STEP 7: Compile and execute the program.

STEP 8: Print the result.

STEP 9: End.

PROGRAM:

# Using a Python dictionary to act as an adjacency list
graph = {
    'A' : ['B','C'],
    'B' : ['D', 'E'],
    'C' : ['F'],
    'D' : [],
    'E' : ['F'],
    'F' : []


}

visited = set() # Set to keep track of visited nodes.

def dfs(visited, graph, node):
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
dfs(visited, graph, â€˜A')
                            

OUTPUT:










RESULT:	Therefore, the above program to implement Depth First Search Algorithm is compiled and executed successfully
